{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Part of RCNN model training. Full code in [Github](https://github.com/ravirajsinh45/implementation_of_RCNN).","metadata":{}},{"cell_type":"code","source":"!pip uninstall opencv-python -y","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:14.704044Z","iopub.execute_input":"2021-05-25T07:11:14.704416Z","iopub.status.idle":"2021-05-25T07:11:16.962054Z","shell.execute_reply.started":"2021-05-25T07:11:14.704331Z","shell.execute_reply":"2021-05-25T07:11:16.961223Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install opencv-contrib-python","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:16.965833Z","iopub.execute_input":"2021-05-25T07:11:16.966114Z","iopub.status.idle":"2021-05-25T07:11:26.627702Z","shell.execute_reply.started":"2021-05-25T07:11:16.966086Z","shell.execute_reply":"2021-05-25T07:11:26.626811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nimport os\nfrom tqdm import tqdm\nimport json\nimport warnings\nimport pickle\nwarnings.filterwarnings('ignore')\n","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:26.630578Z","iopub.execute_input":"2021-05-25T07:11:26.630974Z","iopub.status.idle":"2021-05-25T07:11:31.796289Z","shell.execute_reply.started":"2021-05-25T07:11:26.630932Z","shell.execute_reply":"2021-05-25T07:11:31.795495Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_path = '../input/rcnn-training-part-1-finetuning/RCNN_crop_weed_classification_model.h5'\ntest_img_path = '../input/rcnn-data-preprocessing-part-2/Test/'\nimages_path = '../input/crop-and-weed-detection-data-with-bounding-boxes/agri_data/data/'\nsvm_model_path = '../input/rcnn-training-part-2-cnn-svm/svm_classifier.pkl'\nimages_name = [x for x in os.listdir(images_path) if x.endswith('.jpeg')]","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","execution":{"iopub.status.busy":"2021-05-25T07:11:31.797479Z","iopub.execute_input":"2021-05-25T07:11:31.797811Z","iopub.status.idle":"2021-05-25T07:11:31.909966Z","shell.execute_reply.started":"2021-05-25T07:11:31.797776Z","shell.execute_reply":"2021-05-25T07:11:31.909174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Loading all previously trained model","metadata":{}},{"cell_type":"code","source":"model = tf.keras.models.load_model(model_path)","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:31.913033Z","iopub.execute_input":"2021-05-25T07:11:31.913412Z","iopub.status.idle":"2021-05-25T07:11:48.79683Z","shell.execute_reply.started":"2021-05-25T07:11:31.913365Z","shell.execute_reply":"2021-05-25T07:11:48.795955Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:48.798349Z","iopub.execute_input":"2021-05-25T07:11:48.798699Z","iopub.status.idle":"2021-05-25T07:11:48.813292Z","shell.execute_reply.started":"2021-05-25T07:11:48.798661Z","shell.execute_reply":"2021-05-25T07:11:48.811783Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_without_last_two_fc = tf.keras.models.Model(model.inputs,model.layers[-5].output)","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:48.815048Z","iopub.execute_input":"2021-05-25T07:11:48.815437Z","iopub.status.idle":"2021-05-25T07:11:48.829474Z","shell.execute_reply.started":"2021-05-25T07:11:48.815392Z","shell.execute_reply":"2021-05-25T07:11:48.827774Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_without_last_two_fc.summary()","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:48.830798Z","iopub.execute_input":"2021-05-25T07:11:48.831266Z","iopub.status.idle":"2021-05-25T07:11:48.845488Z","shell.execute_reply.started":"2021-05-25T07:11:48.831213Z","shell.execute_reply":"2021-05-25T07:11:48.844672Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with open(svm_model_path,'rb') as svm:\n    svm_model = pickle.load(svm)","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:48.849432Z","iopub.execute_input":"2021-05-25T07:11:48.849683Z","iopub.status.idle":"2021-05-25T07:11:49.595287Z","shell.execute_reply.started":"2021-05-25T07:11:48.849659Z","shell.execute_reply":"2021-05-25T07:11:49.594465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Defining function for iou calculation","metadata":{}},{"cell_type":"code","source":"def iou_calc(bb1 , bb2):\n  \n    true_xmin, true_ymin, true_width, true_height  = bb1\n    bb_xmin, bb_ymin,  bb_width, bb_height = bb2\n\n    true_xmax = true_xmin + true_width\n    true_ymax = true_ymin + true_height\n    bb_xmax = bb_xmin + bb_width\n    bb_ymax = bb_ymin + bb_height\n\n    #calculating area\n    true_area = true_width * true_height\n    bb_area   = bb_width * bb_height \n\n    #calculating itersection cordinates\n    inter_xmin = max(true_xmin , bb_xmin) \n    inter_ymin = max(true_ymin , bb_ymin)\n    inter_xmax = min(true_xmax , bb_xmax)\n    inter_ymax = min(true_ymax , bb_ymax)\n\n    if inter_xmax <= inter_xmin or inter_ymax <= inter_ymin:\n        iou = 0\n\n\n    else:\n        inter_area = (inter_xmax - inter_xmin) * (inter_ymax - inter_ymin)\n\n\n        iou = inter_area / (true_area + bb_area - inter_area)\n        \n    assert iou<=1\n    assert iou>=0\n    \n    return iou","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:49.598851Z","iopub.execute_input":"2021-05-25T07:11:49.599129Z","iopub.status.idle":"2021-05-25T07:11:49.608391Z","shell.execute_reply.started":"2021-05-25T07:11:49.599103Z","shell.execute_reply":"2021-05-25T07:11:49.607649Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Performing detection","metadata":{}},{"cell_type":"code","source":"def detection(img_path,confidence=0.9,iou_thresh=0.1):\n    \n    # appling selective search\n    img = plt.imread(img_path)\n    cv2.setUseOptimized(True);\n    ss = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()\n    ss.setBaseImage(img)\n    ss.switchToSelectiveSearchFast()\n    rects = ss.process()\n    sel_rects = rects[:2000]\n    \n    pred_crop=[]\n    pred_weed=[]\n    for index, rect in tqdm(enumerate(sel_rects)):\n\n        x,y,w,h = rect\n        roi = img[y:y+h,x:x+w,:]\n        resized_roi = cv2.resize(roi,(224,224))/255\n        \n        # Feature extraction\n        \n        feature = model_without_last_two_fc.predict(resized_roi.reshape(-1,224,224,3))\n        \n        # SVM prediction\n        pred = svm_model.predict_proba(feature.reshape(-1,4096))\n        pred_lab=svm_model.predict(feature.reshape(-1,4096))\n\n        if pred_lab == 'crop' and np.max(pred)>confidence:\n            pred_crop.append([list(rect),np.max(pred)])\n        elif pred_lab=='weed' and np.max(pred)>confidence:\n            pred_weed.append([list(rect),np.max(pred)])\n            \n    final = []\n    \n    # Detection for crop class\n    if len(pred_crop) != 0:\n        pred_score_crop = [x[1] for x in pred_crop]\n        pred_bb_crop = [x[0] for x in pred_crop]\n\n        for i in range(len(pred_crop)):\n            temp_bb , temp_score = pred_bb_crop.copy() , pred_score_crop.copy()\n            if len(temp_bb) !=0:\n\n                max_score_box = temp_bb[np.argmax(temp_score)]\n\n                if [max_score_box,np.max(temp_score)] not in final:\n                    final.append([max_score_box,np.max(temp_score),'crop'])\n                    index_should_del = []\n\n                    for ind,other_bb in enumerate(temp_bb):\n                        iou_score = iou_calc(max_score_box , other_bb)\n                        \n                        # Non maximum suppression(nms)\n                        \n                        if iou_score >= iou_thresh:\n                            index_should_del.append(ind)\n\n                    pred_bb_crop    = []\n                    pred_score_crop = []\n                    for bb_index ,bb_value in enumerate(temp_bb) :\n                        if bb_index not in index_should_del:\n                            pred_bb_crop.append(bb_value)\n\n                    for score_index ,score_value in enumerate(temp_score) :\n                        if score_index not in index_should_del:\n                            pred_score_crop.append(score_value)\n                else:\n                    continue\n\n            else:\n                break\n\n    # Detection for weed class\n\n    if len(pred_weed) != 0:\n        pred_score_weed = [x[1] for x in pred_weed]\n        pred_bb_weed = [x[0] for x in pred_weed]\n\n        for i in range(len(pred_weed)):\n            temp_bb , temp_score = pred_bb_weed.copy() , pred_score_weed.copy()\n            if len(temp_bb) !=0:\n\n                max_score_box = temp_bb[np.argmax(temp_score)]\n\n                if [max_score_box,np.max(temp_score)] not in final:\n                    final.append([max_score_box,np.max(temp_score),'weed'])\n                    index_should_del = []\n\n                    for ind,other_bb in enumerate(temp_bb):\n                        iou_score = iou_calc(max_score_box , other_bb)\n\n                        if iou_score >= iou_thresh:\n                            index_should_del.append(ind)\n\n                    pred_bb_weed    = []\n                    pred_score_weed = []\n                    for bb_index ,bb_value in enumerate(temp_bb) :\n                        if bb_index not in index_should_del:\n                            pred_bb_weed.append(bb_value)\n\n                    for score_index ,score_value in enumerate(temp_score) :\n                        if score_index not in index_should_del:\n                            pred_score_weed.append(score_value)\n                else:\n                    continue\n\n            else:\n                break\n    \n   \n    imOut = img.copy()\n    for rect,score,cls in final:\n        \n        x,y,w,h = rect\n        if cls == 'weed':\n            color =(255,0,0)\n        if cls == 'crop':\n            color = (0,255,0)\n\n        cv2.rectangle(imOut,(x,y),(x+w,y+h),color,2)\n\n        cv2.putText(imOut,cls+':'+str(round(score*100,2)),(x,y-8),cv2.FONT_HERSHEY_SIMPLEX,1, color, 2, cv2.LINE_AA)\n    plt.imshow(imOut)\n    cv2.imwrite('prediction.jpeg',imOut)\n   \n\n    return final ","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:49.610033Z","iopub.execute_input":"2021-05-25T07:11:49.610371Z","iopub.status.idle":"2021-05-25T07:11:49.633599Z","shell.execute_reply.started":"2021-05-25T07:11:49.610335Z","shell.execute_reply":"2021-05-25T07:11:49.632698Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"detection(images_path+images_name[500])","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:11:49.634948Z","iopub.execute_input":"2021-05-25T07:11:49.635287Z","iopub.status.idle":"2021-05-25T07:13:20.678552Z","shell.execute_reply.started":"2021-05-25T07:11:49.635252Z","shell.execute_reply":"2021-05-25T07:13:20.677533Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"detection(images_path+images_name[24])","metadata":{"execution":{"iopub.status.busy":"2021-05-25T07:13:20.679835Z","iopub.execute_input":"2021-05-25T07:13:20.680184Z","iopub.status.idle":"2021-05-25T07:14:48.082486Z","shell.execute_reply.started":"2021-05-25T07:13:20.680146Z","shell.execute_reply":"2021-05-25T07:14:48.081733Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}